// Code generated by MockGen. DO NOT EDIT.
// Source: config_client.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigClient is a mock of ConfigClient interface
type MockConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigClientMockRecorder
}

// MockConfigClientMockRecorder is the mock recorder for MockConfigClient
type MockConfigClientMockRecorder struct {
	mock *MockConfigClient
}

// NewMockConfigClient creates a new mock instance
func NewMockConfigClient(ctrl *gomock.Controller) *MockConfigClient {
	mock := &MockConfigClient{ctrl: ctrl}
	mock.recorder = &MockConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigClient) EXPECT() *MockConfigClientMockRecorder {
	return m.recorder
}

// ReadConfigFromFile mocks base method
func (m *MockConfigClient) ReadConfigFromFile(ctx context.Context, path string) (Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfigFromFile", ctx, path)
	ret0, _ := ret[0].(Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfigFromFile indicates an expected call of ReadConfigFromFile
func (mr *MockConfigClientMockRecorder) ReadConfigFromFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfigFromFile", reflect.TypeOf((*MockConfigClient)(nil).ReadConfigFromFile), ctx, path)
}
