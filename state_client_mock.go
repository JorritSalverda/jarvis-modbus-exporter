// Code generated by MockGen. DO NOT EDIT.
// Source: state_client.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	contracts "github.com/JorritSalverda/jarvis-contracts-golang/contracts/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStateClient is a mock of StateClient interface
type MockStateClient struct {
	ctrl     *gomock.Controller
	recorder *MockStateClientMockRecorder
}

// MockStateClientMockRecorder is the mock recorder for MockStateClient
type MockStateClientMockRecorder struct {
	mock *MockStateClient
}

// NewMockStateClient creates a new mock instance
func NewMockStateClient(ctrl *gomock.Controller) *MockStateClient {
	mock := &MockStateClient{ctrl: ctrl}
	mock.recorder = &MockStateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateClient) EXPECT() *MockStateClientMockRecorder {
	return m.recorder
}

// ReadState mocks base method
func (m *MockStateClient) ReadState(ctx context.Context) (*contracts.Measurement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadState", ctx)
	ret0, _ := ret[0].(*contracts.Measurement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadState indicates an expected call of ReadState
func (mr *MockStateClientMockRecorder) ReadState(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadState", reflect.TypeOf((*MockStateClient)(nil).ReadState), ctx)
}

// StoreState mocks base method
func (m *MockStateClient) StoreState(ctx context.Context, measurement contracts.Measurement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreState", ctx, measurement)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreState indicates an expected call of StoreState
func (mr *MockStateClientMockRecorder) StoreState(ctx, measurement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreState", reflect.TypeOf((*MockStateClient)(nil).StoreState), ctx, measurement)
}
