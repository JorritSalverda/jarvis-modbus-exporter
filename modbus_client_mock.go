// Code generated by MockGen. DO NOT EDIT.
// Source: modbus_client.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	v1 "github.com/JorritSalverda/jarvis-contracts-golang/contracts/v1"
	modbus "github.com/goburrow/modbus"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModbusClient is a mock of ModbusClient interface
type MockModbusClient struct {
	ctrl     *gomock.Controller
	recorder *MockModbusClientMockRecorder
}

// MockModbusClientMockRecorder is the mock recorder for MockModbusClient
type MockModbusClientMockRecorder struct {
	mock *MockModbusClient
}

// NewMockModbusClient creates a new mock instance
func NewMockModbusClient(ctrl *gomock.Controller) *MockModbusClient {
	mock := &MockModbusClient{ctrl: ctrl}
	mock.recorder = &MockModbusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModbusClient) EXPECT() *MockModbusClientMockRecorder {
	return m.recorder
}

// GetMeasurement mocks base method
func (m *MockModbusClient) GetMeasurement(ctx context.Context, config Config, lastMeasurement *v1.Measurement) (v1.Measurement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurement", ctx, config, lastMeasurement)
	ret0, _ := ret[0].(v1.Measurement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeasurement indicates an expected call of GetMeasurement
func (mr *MockModbusClientMockRecorder) GetMeasurement(ctx, config, lastMeasurement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurement", reflect.TypeOf((*MockModbusClient)(nil).GetMeasurement), ctx, config, lastMeasurement)
}

// GetSample mocks base method
func (m *MockModbusClient) GetSample(ctx context.Context, config Config, sampleConfig ConfigSample, modbusClient modbus.Client) (v1.Sample, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSample", ctx, config, sampleConfig, modbusClient)
	ret0, _ := ret[0].(v1.Sample)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSample indicates an expected call of GetSample
func (mr *MockModbusClientMockRecorder) GetSample(ctx, config, sampleConfig, modbusClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSample", reflect.TypeOf((*MockModbusClient)(nil).GetSample), ctx, config, sampleConfig, modbusClient)
}
