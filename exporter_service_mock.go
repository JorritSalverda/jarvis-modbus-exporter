// Code generated by MockGen. DO NOT EDIT.
// Source: exporter_service.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExporterService is a mock of ExporterService interface
type MockExporterService struct {
	ctrl     *gomock.Controller
	recorder *MockExporterServiceMockRecorder
}

// MockExporterServiceMockRecorder is the mock recorder for MockExporterService
type MockExporterServiceMockRecorder struct {
	mock *MockExporterService
}

// NewMockExporterService creates a new mock instance
func NewMockExporterService(ctrl *gomock.Controller) *MockExporterService {
	mock := &MockExporterService{ctrl: ctrl}
	mock.recorder = &MockExporterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExporterService) EXPECT() *MockExporterServiceMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockExporterService) Run(ctx context.Context, bigqueryInit bool, bigqueryDataset, bigqueryTable string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, bigqueryInit, bigqueryDataset, bigqueryTable)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockExporterServiceMockRecorder) Run(ctx, bigqueryInit, bigqueryDataset, bigqueryTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExporterService)(nil).Run), ctx, bigqueryInit, bigqueryDataset, bigqueryTable)
}
